import { Request, Response, NextFunction } from 'express';
import { default as Transaction } from '../models/Transaction';
import Payback  from '../Payback/payback';
import * as Rx from 'rxjs/Rx';
import { Observer } from 'rxjs/Rx';
import * as helper from './helper';

/**
 * GET /make-payment/order
 * page for making an order.
 * @param req {Request} the Request
 * @param res {Response} the Response
 */
export const search = (req: Request, res: Response, redisClient: any) => {
  res.locals.mode = 'check-order--search';
  res.render('check-order/check', {
    title: 'Check | Fish'
  });
};

/**
 * GET /make-payment/success
 * page for showing successful order
 * @param req {Request} the Request
 * @param res {Response} the Response
 */
export const srchResults = (req: Request, res: Response, next: NextFunction, redisClient: any) => {

  const { name, referenceNo } = req.body;

  // const stream = payback.createBraintreeQueryTransactionStream('9ecfdwgj');
  // payback.braintreeQueryTransaction('kw17kmnv');

  // first retrieve record from database,
  // if record is found, send response to client,
  //  then double check from braintree
  //   if record is found, update the record in database
  //   if not, delete the record in database
  // if record is not found, send response to client,
  //  since all we have is name and the referenceNo generated by ourselves,
  //  we can't query the record from Paypal/Braintree, so stop here
  // const stream = createFindRecordFromMongoStream(name, referenceNo)
  const stream = helper.createFindRecordFromRedisStream(name, referenceNo, redisClient)
    .flatMap((result: any) => {
      if (result.status === 'success') {
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify({ status: 'success', result: result.result }));

        const payType = result.result.type;
        if (payType === 'BRAINTREE') {
          // check with Braintree to update the record
          console.log(`check with Braintree to update the record`);
          return helper.createQueryRecordFromBrainTreeStream(result.result.transactionId);
        } else {
          // check with Paypal to update the record
          console.log(`check with Paypal to update the record`);
          return helper.createQueryRecordFromPaypalStream(result.result.transactionId, result.result.currency);
        }

      } else {
        res.setHeader('Content-Type', 'application/json');
        res.send(JSON.stringify({ status: 'failure', result: result.msg }));
        return Rx.Observable.of(0);
      }
    });

  // const stream = payback.createBraintreeQueryTransactionStream(referenceNo);
  stream.subscribe(
    (result: any) => {},
    (err: Error) => {},
    () => { console.log('order query completed'); next(); }
  );
};
